-- salida

procedure testCase02 () is

    -- Constantes
    CIERTO: constant := True;
    FALSO: constant := False;
    UNO: constant := 1;

    -- Tipos primitivos
    x: Integer; --Si se asigna salta error := 1;
    t: Boolean;
    y,z: Integer;
    t1: Tcita;

    DOS: constant := 2;

    -- Tipos estructurados
    type Tpersona is record
        dni: Integer;
        edad : INTEGER;
        casado : Boolean;
    end record;

    type Tfecha is record
        dia,mes: integer;
        --mes : Integer;
        anyo : Integer;
    end record;

    type Tcita is record
        usuario,potato:Tpersona;
        fecha:Tfecha;
    end record;

    -- Funciones
    function prueba () return Boolean is
        y,z: Integer;
        t1: Tcita;
    begin
        return (1);
    end prueba;

    function estructu (y: out Estructurado) return Integer is
    begin
        return pRueba(potato.precios.precioES, parametroDOS > 2, (parametro.TRES - resta(2,1)) );
    end resta;

    function resta2 (x,y: out Integer) return Integer is
    begin
        p1 := 1;
        p2 := prueba;
        p3 := prueba(x);
        p4 := pRueba(potato.precios.precioES, parametroDOS > 2, (parametro.TRES - resta(2,1)) );
        prueba();
        x:=2;
        x := x-2;
        --Probar tambien que no se puede asignar putline a una variable
        Put_line(x);

        return (x-y);
    end resta2;

    random: Boolean;

    function mult (x,y: out Integer; z: Boolean; e: Estructurado) return Integer is
    begin
        put_line("Patata");
        return (x*y)*(2);
    end resta;

    -- Procedimientos
    PROCEDURE resta (x, y, z: out Integer) is
        y,z: Integer;
        t1: Tcita;
    begin
        p1 := 1;
        p2 := prueba;
        p3 := prueba(x);
        p4 := pRueba(potato.precios.precioES, parametroDOS > 2, (parametro.TRES - resta(2,1)) );
        prueba();
        x:=2;
        x := x-2;
        Put_line(x);
    end resta;



begin

    Put_line(x);
    Put_line ("CRONTROL FLUJO WHILE");

  	x:=5;

    resta(x,2);

  	while x > 1 loop

  		Put_line(x);
  		x:=x-1;

  	end loop;


end testCase02;
